@page "/Activities"
@using System.Security.Claims
@using Activities.Client.Extensions

@inject ActivitiesService ActivitiesService
@inject AuthenticationStateProvider AuthStateProvider
@inject ISnackbar Snackbar

<ActivityDashboard Activities="_activities" />

@code {
    private List<ActivityViewModel>? _activities;

    protected override async Task OnInitializedAsync()
    {
        var activitiesResult = await ActivitiesService.GetActivities();
        if (activitiesResult.Failed)
        {
            if (activitiesResult.Exception is not null)
                Snackbar.Add(activitiesResult.Exception.Message, Severity.Error);
            else
                Snackbar.Add(activitiesResult.ErrorMessage, Severity.Error);

            return;
        }

        _activities = new List<ActivityViewModel>();

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userName = authState.GetUserName();
        if (string.IsNullOrWhiteSpace(userName))
            return;

        foreach (var activity in activitiesResult.Payload)
        {
            var activityDto = (ActivityViewModel)activity;

            activityDto.IsGoing = activityDto.Attendees.Any(x => x.UserName == userName && activityDto.HostUserName != userName);
            activityDto.IsHost = activityDto.HostUserName == userName;
            activityDto.Host = activityDto.Attendees.First(x => x.UserName == activityDto.HostUserName);

            _activities.Add(activityDto);
        }
    }
}